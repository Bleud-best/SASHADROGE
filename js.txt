<script> </script> внутрішнє читання коду 
не строго типована мова, перемінні отримують свій тип данних в момент присвоєння
строге типування,задання типу данних при заявленні перемінної
<script src="main.js"></script> тільки зовнішнє,навіть з пустим срц,буде ігнорувати,все ,що в середині
defer  <script defer  src="main.js"></script> буде очікувати повного завантаження сторінки
"use strict"; починати js файл з цього,любий файл працює в строгому режимі ,
не пробачає помилки,взагалі
// коментування до кінця документа 
// good
/**
 * make() returns a new element
 * based on the passed-in tag name
 */

Number числа ,всі Infinity Нескінченність спец значення
NaN помилка в рахунках
String - '1' '2' строка 
Boolean - true false ,логічний тип данних
nuul-null пустота
undefined-undefined невизначенність 
Object єдиний складний тип данних, дає можливість свторювати свій тип данних
Symbol допомагає створювати унікальні единтифікатори
BigInt великі цілі числа
 представник типу данних,це літерал
  представник Boolean літерал true false
перемінні,частина пам'яті,які можуть змінюватись по ходу програми

let name ; створити перемінну  name 
оператори,це команди які являються частиною мови  let const 
поки не дали значення name ,всередині буде undefined 
ім'я перемінної має вказувати,на те,що в ній зберігається
let fruit_type; //snake case зміїний тип

let fruitType; //camel case ми вик цей тип(верблюжий горб)

завжди працюємо на читаємось коду та розуміння його

оптимізація коду в самому кінці проекту!!!


let a;
let b; ось наш варіант
let c;

let a, b, c; так не пишемо

const a=5; створити константу а, вона незмінна
= оператор присвоєння, бере те що справа задає тому що зліва 
let a = 10;

строге типування,задання типу данних при заявленні перемеінної

декларативний стиль, це коли ми записуємо очіємий результат,а не як його досягти

імперативний,це як досягти результат

всі оператори повертають результат в місце виклику

let a = 2 + 2; 1 дія
let a = 4; 2 дія


= самий низький пріорітет запису,завжди працює останнім
 якщо один із параметрів строка, то + склеїть їх

оператори можуть не явно переводити данні,первести один тип в інший

не явно,коли проходять без вашого указу

виклик вікна сповіщення alert()

ctrl+p панель команд
>open setting  ui зверху справа відкриття налаштувань

"editor.mouseWheelZomm": true зум коду через ctrl+колесо

confirm(); виводить повідомлення з кнопками " так і ні",відповідь повертає Boolean 


prompt() String може мати два параметра
поверне поле для вводу,якщо людина написне так
якщо ні ,null

в строці "/n" перенос тексту

ми можемо використовувати різні типи,але мова їх приводить в один

typeof а; or typeof (a); дізнатись ,що лежить тип данних в перемінній

typeof null -> object баг мови офіційний 

для того,щоб вивести \ ,його  потрібно екранувати "\"

% ділення по модолю,залишає нам залишок при діленні , 3 % 2 =1 5 % 2 = 1


if (condition){
//code
} очікую тру або фoлс якщо там буде числа,буде перетворення типу данних

> < - bool true false

 >= <= більше і дорівнює,меньше і дорівнює

 == != рівно не рівно !!!!не використовувати

 === !==  ці можна не приводять типи данних

 ! -> bool -> imvert оператор ні

 '' nuuk NaN fasle undefined 0 -> false

три функції 
Number ()
String ()
Boolean()
 для явного приводу

if(){

}else { по стайл гайду елс пишеться на стрічці де закривається іф

}

if (sdfds){
efedfef;
} else if(yjytjyt){
sdfdfdfd;
} else if (fgvedrfvrv){
rgrg;
}


оператор "||" або
"&&" і 

true || true -> true
true || false -> true
false || true -> true
false || false -> false 

true && true -> true
true && false -> false 
false && true -> false 
false && false -> false 


?: тернарний оператор

2>3 ? alert(true) : alert(fasle)


цикли виконують дію,поки виконується умови

while (condition){
  //code
}

ітерація це одне проходження циклу

let work=0

while (work < 2){
  alert("go home pls");
work = work + 1;
}

инкримент дикримент
let b = work++; // 0 1
let a = ++work; // 1 1 не використовувати


work +=1;
work -=1;
work *=1;
work /=1; так можна	

do {
  alert("go home pls");
  work =+ 1;
} while (work < 10) ;

викнує дію мінімум один раз, в будь якому випадку навіть якщо вайл буде фелс

for (initial block; condition block; afteraction block ){
//code
}

initial block виконується один раз при запуск циклу
condition block виконується поки не буде фалс ,(блок умова)
afteraction block (після дія) блок який виконується після тіла на кожній ітерації


console.log(1); видає повідомлення в консолі

оператор break перериває роботу цикла в якому знаходиться
 for (let i = 1; i < 10 ; i += 1){
console.log(1)
if (i % 2 === 0 ){
break;
}
}
continue; відразу переходимо до наступної ітерації
 for (initial block; condition block; afteraction block ){
//code
continue;
}

groo: мітка циклу

функція це блок іменованого кода


function< name> (...perems) {  //code тело фун  } декларативна функція ,
ще називають вспливаючі, 
створюються на етапі читання скрипта сторінкою 
спочатку йде читання, а потім по строкове виконання
всі скрипти працюють в 2 етапи

function slave () {
console.log ("yes master")
}

slave ();

function slave(a){
console.log (a)
}

function sum(num1 = 0 , num2 = 0){
  console.log(num1 + num2)
}

якщо в num1  нічого не задали, то буде 0,ми можемо самі задати їм значення 

одна функція має виконувати одну логічну дію

arguments це набір всіх відправлених параметрів,всі данні проіндексовані, 
розпочингаючи з 0, і йе псевдомасив

arguments[0] 

console.log(arguments.length)
arguments.length показує скільки данних в arguments


лексичне оточення функції Все переменные внутри функции – 
это свойства специального внутреннего объекта LexicalEnvironment, 
который создаётся при её запуске.
процедурний стиль, це коли ф

dry-don`t repeat yourself
чиста функція, з однаковими параметнрами завжди поверне однаковий результат,
не має побічних ефектів (вивід в консоль,мережеві запити, DOM маніпуляції)

stack  виклику це набір куди записуються всі викликаємі функції

lifo last in first out функції добавляються,але виконуються з кінця

`${}` шаблонні строки,всередину кавичок можна вставляти джс код

switch(value1){
case <value11>: {code};
break;
case <value12>: {code};
break;
case <value13>: {code};
break;
default:{code};
} вміє 

прямокутник-дія
ромб-умова
овал-ввід\вивід(старт \кінець)

legacy code
"use strict"; можна використовувати не лише на весь файл,а і на окрему функцію.

function f(a,b,c){
a=a || 10;
b=b || 2;
c=c || 4;
console.log(a+b+c)
}.
.всі функції шукаїть данні у його оточенні ,якщо немає,то вийде у зовнішній простір

глобальній(на весь код) і локальні(лише на її області бачення)

return повертає данні із коду,функції,все що нище ретурна не виконується

function f( num1 , num2 ){
return num1 + num2 ;
console.log(num1 + num2)
}.

debugger; дає можливість читати код построково




спілкування через меню з вибором пункту
у всіх пунктів є цифра
у всіх підменю є варіант(кнопка) вийти в головне меню
бот первіряє введений номер меню,і попросить ввести знову,якщо введеної цифри немає

1)бот має функцію спілкування,ми пишемо,він відповідає
2)гра в попугая, ми скажемо що і скільки разів повторити,він це повторить
3)пройти опитування і дізнатись ,на скільки відповідей дали правильену відповідь 

для кожної частини бота,має бути створений алгоритм


математичні операції, + - / * ,ми вводимо 2 числа,бот виконує рахунок


нотація великого "О"  or О(n) n-данні О час виконання (оцінка важкості алгоритму)
константи рахуються як 1

лінійна залежність ,в залежності від кількості данних росте час виконання O(n) 

o order of complexity 
n number of input

всі дії підрят ми додаємо
вкладені дії ми множимо

беремо найважчий результат

якщо у формулі калька значень ,то треба брати самий важкий участок

через квадратні дужки можна дізнатись індекс числа "56516118941" [4] = 6

всі функції завжди повертають значення, або вказані розробником,або undefined
"56516118941".length  =11

"102".padEnd(50, 0) дописати 0 в кінці до 50 символів
"102".padStart(50, 0) дописати 0 на початку до 50 символів

.trim() забирає пробіли ,до та після символів

.toLowerCase() переодить в нижній реєстр з (NHGUHH) to(efefefe)
.toUpperCase()  переодить у верхній реєстр (efefefe) to (NHGUHH)

"Oleg".split("e") розбиває строку по сепаратору,сепаратор невиводиться "Ol , g"
"Love".repeat(3) "LoveLoveLove"

"efefef".indexOf("f") шукає перший зустрічений індекс

.lastSndexOf з кінця шукає

"efefef".includes("у")шукає збіги у строці тру або фелс

"123456".slice(3,6)  (-5) створює нову строку по індексу 
456
всі строки в джс імутабельні (їх неможливо змінити)


функціональне вираз створюється в результаті виразу
під види - анонімні та іменні 
іменні
let f = function() {};
let f1 = function myF() { myF }; можна дати ім'я,це ім'я може бути використана в середині функції

анонімні,це ті,у кого немає імені
функції можна використовувати у виразах
IIFE

стілкові функції 
let aaao = () => {};

let aaa2o = (a,b) => a + b; повертає а + b
якщо параметр один ,можна пропустити круглі дуцжки let aaa2o = a => a + b;
АЛЕ ПО СТАЙЛ ГАЙДУ МАЮТЬ ЗАВЖДИ БУТИ ДУЖКИ навколо параметрів 

(5).toString(2) - 101 переведоть в кодову(двоїчна,16) систему,без параметру в строку

Math об'єкт з математичними функціями
Math.min (1,60,-20) 1
Math.max (1,60,-20) 60

округлдення 
Math.floor() округлює в низ,меньшу сторону
Math.floor(5,98946)-5
Math.ceil() в більшу сторону (5,00001)-6
Math.round() як в школі 5,4- ; 5,6 - 6
(10,5).toFixed округлює і записує у вигляді строки
(10,54798).toFixed(3)-10,548

Math.random() від 0 до 1 рандомить число, від 0 до 0,999999999,   1 ніколи

від 01,01 1970 разується час в гаджетах

у стка є розмір,рекурсія це заповнює

рекурсія,це коли функція викликає саму себе)

